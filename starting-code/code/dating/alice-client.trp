(* Benign client - Alice *)

import lists

let 
    (* Create profile with proper security labels *)
    fun createProfile() =
        let val aliceLevel = label("alice", {})  (* Level value with bottom label *)
            val name = label("Alice", {alice})
            val year = label(1995, {alice})
            val gender = label(true, {alice}) (* female *)
            val interests = label(["hiking", "music"], {alice})
            
            (* Profile structure must be (lev, name, year, gender, interests) *)
            val profile = (aliceLevel, name, year, gender, interests)
        in 
            profile
        end
    
    (* Discovery agent that follows protocol specifications *)
    fun agent(otherProfile) =
        let val (otherLevel, otherName, otherYear, otherGender, otherInterests) = otherProfile
            val otherLevelValue = unlabel otherLevel
            val otherLevelSet = {otherLevelValue}
            
            (* Alice prefers males *)
            val preference = 
                let val rawPref = not (unlabel otherGender)  (* Not true means male *)
                in
                    authority {alice} 
                        declassify(label(rawPref, {alice}), otherLevelSet)
                end
            
            (* Create profile to share if there's a match *)
            val sharedProfile = 
                if unlabel preference then
                    let val sharedLev = label("alice", otherLevelSet)  (* Labeled for other party *)
                        val sharedName = 
                            authority {alice} 
                                declassify(name, otherLevelSet)
                        val sharedYear = 
                            authority {alice} 
                                declassify(year, otherLevelSet)
                        val sharedGender = 
                            authority {alice} 
                                declassify(gender, otherLevelSet)
                        val sharedInterests = 
                            authority {alice} 
                                declassify(interests, otherLevelSet)
                    in
                        (sharedLev, sharedName, sharedYear, sharedGender, sharedInterests)
                    end
                else
                    ()
        in
            (preference, sharedProfile)
        end
    
    (* Main function *)
    fun main() =
        let val _ = printString "Starting Alice client"
            val serverPid = whereis ("@datingServer", "datingServer")
            val profile = createProfile()
            val selfPid = self()
            
            (* Send profile to server *)
            val _ = send(serverPid, ("NEWPROFILE", (profile, agent, selfPid)))
            val _ = printString "Profile sent to server"
            
            (* Handle incoming matches *)
            fun waitForMatches() =
                let val _ = receive[hn ("NEWMATCH", matchProfile) =>
                                      (printString "Match received!";
                                       case matchProfile of
                                           (matchLev, matchName, matchYear, matchGender, matchInterests) =>
                                               let val genderStr = if unlabel matchGender then "female" else "male"
                                                   val interestsStr = String.concatWith ", " (unlabel matchInterests)
                                               in
                                                   printString ("Match details: " ^ unlabel matchName ^ 
                                                                ", born " ^ Int.toString (unlabel matchYear) ^ 
                                                                ", " ^ genderStr ^ 
                                                                ", interests: " ^ interestsStr)
                                               end
                                         | _ => printString "Invalid match profile format")]
                in waitForMatches()
                end
        in
            waitForMatches()
        end
in
    main()
end